<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这是第一篇文章</title>
    <link href="/blog/2020/11/23/%E8%BF%99%E6%98%AF%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/blog/2020/11/23/%E8%BF%99%E6%98%AF%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>从上大学时就开始自己捣鼓博客，之前的博客一直都是 <code>WordPress</code>, 本站是第一次使用 hexo 创建的静态站，记录生活，附加技术。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2020/10/24/hello-world/"/>
    <url>/blog/2020/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>尝鲜 Vue3.0 组合式API</title>
    <link href="/blog/2020/09/06/%E5%B0%9D%E9%B2%9CVue3.0%E7%BB%84%E5%90%88%E5%BC%8FAPI/"/>
    <url>/blog/2020/09/06/%E5%B0%9D%E9%B2%9CVue3.0%E7%BB%84%E5%90%88%E5%BC%8FAPI/</url>
    
    <content type="html"><![CDATA[<p><img src="/blog/2020/09/06/%E5%B0%9D%E9%B2%9CVue3.0%E7%BB%84%E5%90%88%E5%BC%8FAPI/vue.jpg"> </p><p>Vue 3.0 即将发布，我们已经可以尝试一些新版本中带来的新功能，比如 Composition-API 组合式API。如果你了解过 React 的 Hooks，那么当你看到组合式API时一定不会感到陌生。组合式API受到了 React Hooks 很大的启发。</p><p>Vue 非常易于使用，并且有非常出色的 API，对于初学者来说配合官方文档很容易就可以理解 Vue 的语法。但在国内一些大型的项目可能不会首选 Vue 去开发，因为当组件越来越大的时候会变得很难维护，很难找到一个变量在哪被定义又是在哪被使用。Vue2 中也有一些解决方法，比如mixin、HOC、作用域插槽等等，但是都不能非常完美的去解决这个问题。</p><p>说到 mixin，其实 mixin 非常简单，我们可以通过它来把一些公共的数据、方法等等进行抽离后合并到一个组件。但当项目中的 mixin 越来越多的时候你就会发现命名冲突的可能性会变得很大，某些状态和方法的来源恨不清晰。</p><p>组合式API可以很完美的解决这个问题。</p><h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2><p>可以使用 Vue-CLI 搭建一个 Vue3 的项目，也可以直接下载 <code>@vue/composition-api</code> 包来使用。</p><pre><code class="hljs shell">npm i @vue/composition-api</code></pre><p>在 <code>main.js</code> 文件中 use 组合式API：</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> compositionApi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/composition-api&#x27;</span>;Vue.use(compositionApi);</code></pre><p>从一个计数器的小案例开始。新建一个 Count.vue ：<br><img src="/blog/2020/09/06/%E5%B0%9D%E9%B2%9CVue3.0%E7%BB%84%E5%90%88%E5%BC%8FAPI/image1.gif"> </p><pre><code class="hljs vue">&lt;template&gt;  &lt;div class&#x3D;&quot;count&quot;&gt;    &lt;button @click&#x3D;&quot;increment&quot;&gt;Count is: &#123;&#123;state.count&#125;&#125;, double is: &#123;&#123;state.double&#125;&#125;&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, computed &#125; from &quot;@vue&#x2F;composition-api&quot;;export default &#123;  name: &quot;Count&quot;,  setup() &#123;    const state &#x3D; reactive(&#123;      count: 0,      double: computed(() &#x3D;&gt; state.count * 2)    &#125;);    const increment &#x3D; () &#x3D;&gt; state.count++;    return &#123;      state,      increment    &#125;;  &#125;&#125;;&lt;&#x2F;script&gt;</code></pre><p>在 vue3 中有一个新的方法 <code>setup()</code>。data、computed等属性都需要放到 setup 中，setup 返回的是一个对象，该对象包含在组件中应该可用的所有内容。</p><p>另外还使用了两个函数<code>reactive()</code>、<code>computed()</code>。reactive 与 Vue 2 中的 <code>Vue.observable</code> 等效。<code>computed()</code> 是创建计算属性的另一种方式，除此之外与2没有区别。</p><p>然后可以在 <code>App.vue</code> 中导入 <code>Count.vue</code>。</p><pre><code class="hljs vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;Count &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import Count from &quot;@&#x2F;components&#x2F;Count&quot;;export default &#123;  name: &quot;app&quot;,  components: &#123; Count &#125;&#125;;&lt;&#x2F;script&gt;</code></pre><p>这是一个很简单的 demo。</p><h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><p><img src="/blog/2020/09/06/%E5%B0%9D%E9%B2%9CVue3.0%E7%BB%84%E5%90%88%E5%BC%8FAPI/image2.gif"><br>让我们来继续尝试做一些更好玩的事情。一个可以从随机狗狗网站 <a href="https://dog.ceo/">https://dog.ceo</a> 中获取狗狗照片的功能。</p><p>创建一个 useApi 函数，他的状态有：<code>data</code> 和 <code>api_status</code>，还有一个 <code>initFetch</code> 功能。useApi 接收 url 和 options 两个参数。我们将使用它从 <a href="https://dog.ceo/">https://dog.ceo</a> 提供的 API 中提取随机的狗狗照片。创建一个 <code>Dog.vue</code> 组件，并添加如下代码：</p><pre><code class="hljs vue">const useApi &#x3D; (url, options &#x3D; &#123;&#125;) &#x3D;&gt; &#123;  const state &#x3D; reactive(&#123;    data: null,    api_status: &quot;&quot;  &#125;);  const initFetch &#x3D; async () &#x3D;&gt; &#123;    try &#123;      &#x2F;&#x2F; 更改 API 状态      state.api_status &#x3D; &quot;FETCHING&quot;;      &#x2F;&#x2F; 发送请求      const response &#x3D; await fetch(url);      &#x2F;&#x2F; 格式化返回结果      const data &#x3D; await response.json();      state.data &#x3D; data.message;      &#x2F;&#x2F; 修改 API 状态      state.api_status &#x3D; &quot;FETCHING_SUCCESS&quot;;    &#125; catch (error) &#123;      &#x2F;&#x2F; 处理错误情况      state.api_status &#x3D; &quot;FETCHING_ERROR&quot;;    &#125;  &#125;;   &#x2F;&#x2F; 判断有没有 fetchImmediately 属性，并且不为空  if (Object.prototype.hasOwnProperty.call(options, &quot;fetchImmediately&quot;) &amp;&amp; options.fetchImmediately) &#123;    initFetch();  &#125;    return &#123;    ...toRefs(state),    initFetch  &#125;;&#125;;</code></pre><p>这里使用到了 <code>toRefs()</code>，稍后会详细讲。<br>在 useApi 函数中，我们声明了state 包括 data 和 api_status。此外，initFetch 功能是更新 api_status 和发送请求。</p><p>接下来，我们检查 options 对象是否具有 fetchImmediately 属性。它指示在创建组件时是否应初始化API调用。最后，我们返回一个响应式 state 和 initFetch 函数的对象 。我们没有直接返回 state，而是使用 toRefs 进行包装。使用 toRefs 包装每个值，可以让他们具有响应性。</p><pre><code class="hljs vue">export default &#123;  setup() &#123;    const &#123; data, api_status, initFetch &#125; &#x3D; useApi(      &quot;https:&#x2F;&#x2F;dog.ceo&#x2F;api&#x2F;breeds&#x2F;image&#x2F;random&quot;,      &#123;        fetchImmediately: true      &#125;    );    return &#123;      dogImage: data,      api_status,      fetchDog: initFetch    &#125;;  &#125;&#125;;</code></pre><p>如前所述，我们可以从 useApi 中解构所需的属性而不会失去响应性。此外，从 setup 返回的对象已重命名了属性。最后加上模板：</p><pre><code class="hljs vue">&lt;template&gt;  &lt;div style&#x3D;&quot;margin-top: 20px;&quot;&gt;    &lt;div v-if&#x3D;&quot;api_status &#x3D;&#x3D;&#x3D; &#39;FETCHING&#39;&quot;&gt;Fetching&lt;&#x2F;div&gt;    &lt;div v-else-if&#x3D;&quot;api_status &#x3D;&#x3D;&#x3D; &#39;FETCHING_ERROR&#39;&quot;&gt;Error&lt;&#x2F;div&gt;    &lt;div v-else-if&#x3D;&quot;api_status &#x3D;&#x3D;&#x3D; &#39;FETCHING_SUCCESS&#39;&quot;&gt;      &lt;img :src&#x3D;&quot;dogImage&quot; style&#x3D;&quot;display: block; max-width: 500px; height: auto; margin: 0 auto;&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;    &lt;div v-else&gt;Oops, no dog found&lt;&#x2F;div&gt;    &lt;button style&#x3D;&quot;margin-top: 20px;&quot; @click.prevent&#x3D;&quot;fetchDog&quot;&gt;Fetch dog&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre><p>这些模板 divs 取决于 api_status 来显示或隐藏。由于传递fetchImmediately: true 给 useApi，因此会在初始化时发送一条请求，您可以通过单击 Fetch dog 按钮来再一次发起请求。</p><p>你可以在 <a href="https://github.com/mk965/vue3-composition-api-demo">Github</a> 上下载完整 demo 代码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
